{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/eslint-loader/index.js??ref--13-0!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandConnection.js","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandConnection.js","mtime":1608333715850},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandConnection.js"],"names":["miband_api_host","miband_host","miband_api_port","miband_port","connectApiCall","mac_add","auth_key","fetch","method","body","JSON","stringify","headers","response","json","result","console","error","disconnectApiCall","getDataMibandFrom","start","end","params","log","getGeneralDataApiCall"],"mappings":";;;;AAAA,SAAQA,eAAe,IAAIC,WAA3B,EAAwCC,eAAe,IAAIC,WAA3D,QAA6E,gBAA7E;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8BC,OAA9B,EAAuCC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEwBC,KAAK,kBAAWN,WAAX,cAA0BE,WAA1B,oBAAsD;AAClFK,cAAAA,MAAM,EAAE,MAD0E;AAElFC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,2BAAWN,OADM;AAEjB,4BAAYC;AAFK,eAAf,CAF4E;AAMlFM,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB;AANyE,aAAtD,CAF7B;;AAAA;AAEOC,YAAAA,QAFP;AAAA;AAAA,mBAUsBA,QAAQ,CAACC,IAAT,EAVtB;;AAAA;AAUOC,YAAAA,MAVP;;AAAA,kBAWIA,MAAM,CAAC,gBAAD,CAAN,IAA0B,WAX9B;AAAA;AAAA;AAAA;;AAAA,6CAYUA,MAAM,CAAC,WAAD,CAZhB;;AAAA;AAAA,6CAca,KAdb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBCC,YAAAA,OAAO,CAACC,KAAR;;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBP,gBAAsBC,iBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEwBX,KAAK,kBAAWN,WAAX,cAA0BE,WAA1B,sBAF7B;;AAAA;AAEOU,YAAAA,QAFP;AAAA;AAAA,mBAGsBA,QAAQ,CAACC,IAAT,EAHtB;;AAAA;AAGOC,YAAAA,MAHP;AAAA,8CAIQA,MAJR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBI,iBAAtB;AAAA;AAAA;;;+EAAO,kBAAiCC,KAAjC,EAAwCC,GAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACY,WAASF,KAAT,GAAiB,OAAjB,GAAyBC,GADrC;AAAA;AAAA;AAAA,mBAGwBd,KAAK,kBAAWN,WAAX,cAA0BE,WAA1B,gCAA2DmB,MAA3D,EAH7B;;AAAA;AAGOT,YAAAA,QAHP;AAAA;AAAA,mBAIsBA,QAAQ,CAACC,IAAT,EAJtB;;AAAA;AAIOC,YAAAA,MAJP;;AAAA,kBAKIA,MAAM,CAAC,iBAAD,CAAN,IAA2B,WAL/B;AAAA;AAAA;AAAA;;AAAA,8CAMYA,MAAM,CAAC,MAAD,CANlB;;AAAA;AAAA,8CAQa,KARb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWCC,YAAAA,OAAO,CAACO,GAAR;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,gBAAsBC,qBAAtB;AAAA;AAAA;;;mFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEwBjB,KAAK,kBAAWN,WAAX,cAA0BE,WAA1B,mBAF7B;;AAAA;AAEOU,YAAAA,QAFP;AAAA;AAAA,mBAGsBA,QAAQ,CAACC,IAAT,EAHtB;;AAAA;AAGOC,YAAAA,MAHP;;AAAA,kBAIIA,MAAM,CAAC,iBAAD,CAAN,KAA4B,WAJhC;AAAA;AAAA;AAAA;;AAAA,8CAKYA,MAAM,CAAC,UAAD,CALlB;;AAAA;AAAA,8CAMQ,KANR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {miband_api_host as miband_host, miband_api_port as miband_port} from './ApiConfig.js'\n\nexport async function connectApiCall(mac_add, auth_key) {\n    try {\n        const response = await fetch(`http://${miband_host}:${miband_port}/band/connect`, {\n        method: 'POST',\n        body: JSON.stringify({\n            'mac_add': mac_add,\n            'auth_key': auth_key\n            }),\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n        })\n        const result = await response.json()\n        if(result['connect-result']=='succeeded') {\n          return result['band-info']\n        }\n        else return false\n    } catch (error) {\n        console.error(error)\n    }\n}\n\nexport async function disconnectApiCall() {\n    try {\n        const response = await fetch(`http://${miband_host}:${miband_port}/band/disconnect`)\n        const result = await response.json()\n        return result\n    } catch (error) {\n        // do something with `error`\n    }\n}\n\nexport async function getDataMibandFrom(start, end) {\n    const params = 'start='+start + '&end='+end\n    try {\n        const response = await fetch(`http://${miband_host}:${miband_port}/band/activitydata?${params}`)\n        const result = await response.json()\n        if(result['log-data-result']=='succeeded'){\n            return result['logs']\n        }\n        else return false\n    }\n    catch (error) {\n        console.log(error);\n    }\n    \n}\n\nexport async function getGeneralDataApiCall() {\n    try {\n        const response = await fetch(`http://${miband_host}:${miband_port}/band/general`)\n        const result = await response.json()\n        if(result['get-step-result']==='succeeded')\n            return result['stepinfo']\n        return false\n    } catch (error) {\n        // do something with `error`\n    }\n}"]}]}