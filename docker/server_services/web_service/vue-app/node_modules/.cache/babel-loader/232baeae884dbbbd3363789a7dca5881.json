{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/thread-loader/dist/cjs.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/DataType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/DataType.vue","mtime":1607529131342},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataType.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div>\n            <b-form inline class=\"d-flex justify-content-between\">\n                <b-form-datepicker id=\"example-datepicker\" v-model=\"datevalue\" class=\"mb-2 w-50\"></b-form-datepicker>\n                \n                <div>\n                    Hour range:\n                    <b-form-spinbutton inline wrap min=\"0\" max=\"23\" v-model=\"hourvalue\"></b-form-spinbutton>\n                    <b-button class=\"ml-1\" variant=\"success\" @click=\"createChartData(hourvalue)\">v</b-button>\n                    <b-button class=\"ml-1\" @click=\"removeHourRange\">x</b-button>\n                </div>\n                \n            </b-form>\n        </div>\n\n        <div v-if=\"getDataStatus === 'PENDING'\">\n            <b-alert variant=\"info\" show>Getting data...</b-alert>\n        </div>\n        \n        <b-skeleton-wrapper :loading=\"getDataStatus === 'PENDING'\">\n            <template #loading>\n                <b-card>\n                <b-skeleton width=\"85%\"></b-skeleton>\n                <b-skeleton width=\"55%\"></b-skeleton>\n                <b-skeleton width=\"70%\"></b-skeleton>\n                </b-card>\n            </template>\n            <div class=\"h-50\">\n                <DataChart :key=\"chartkey\" :data=\"data\" :labels=\"labels\" :type=\"type\"/>\n            </div>\n        </b-skeleton-wrapper>\n    </div>\n</template>\n\n\n<script>\nimport DataChart from '@/components/data/DataChart'\n\n\nvar today = new Date()\n\nexport default {\n    components: { DataChart },\n    props: ['type'],\n    data(){\n        return {\n            activitydata: {},\n            wholedayData: {},\n            hourData: {},\n            labels: [],\n            data: [],\n            mode: -1,\n            datevalue: today.getFullYear() + '-' + String(today.getMonth()+1) + '-' + today.getDate(),\n            hourvalue: null,\n            chartkey: false,\n            getDataStatus: '',\n            miband_host: this.$api_hosts['miband_api'],\n            miband_port: this.$api_ports['miband_api'],\n            miband_db_host: this.$api_hosts['miband_db_api'],\n            miband_db_port: this.$api_ports['miband_db_api'],\n            lastGetDataTime: null\n        }\n    },\n    mounted(){\n        this.addDataFromLastTimestampDb().then(()=>{\n            this.getDatabyDateDb(this.datevalue)\n        })\n\n        this.getDatabyDateDb(this.datevalue)\n        this.generateDataSet()\n    },\n\n    watch: {\n        datevalue: function() {\n            this.getDatabyDateDb(this.datevalue)\n        },\n        getDataStatus: function() {\n            if(this.getDataStatus=='OK') {\n                this.generateDataSet()\n                this.createChartData()                    \n            }\n        },\n        data: function() {\n            this.chartkey = !this.chartkey\n        },\n    },\n\n    methods: {\n        generateDataSet() {\n            var logs = this.activitydata\n            var hourData = {}\n\n            for(var i in logs) {\n                var timestamp = logs[i].timestamp\n                var tmp = new Date(timestamp)\n                var hour = tmp.getHours()\n                var minute = tmp.getMinutes()\n                // dataOfHour[\"asd\"] = \"asd\"\n                if(hourData[String(hour)]==undefined){\n                    hourData[String(hour)] = {}\n                    if(this.type=='hr'){\n                        hourData[String(hour)]['sum'] = 0\n                        hourData[String(hour)]['valid-cnt']=0\n                    }\n                    else if (this.type=='steps'){\n                        hourData[String(hour)]['sum'] = 0\n                    }\n                }\n                var hr = logs[i].heartrate\n                var steps = logs[i].steps\n                hourData[String(hour)][String(minute)] = this.type=='hr'? hr : steps\n                if(this.type=='hr'&& hr!=255){\n                    hourData[String(hour)]['sum']+=hr\n                    hourData[String(hour)]['valid-cnt']++\n                }\n                else if(this.type=='steps') {\n                    hourData[String(hour)]['sum']+=steps\n                }\n            }\n\n            var wholedayData = {}\n            for(var h=0; h<24; h++){\n                if(hourData[h]!=undefined)\n                    wholedayData[h] = this.type=='hr'? Math.round(hourData[h]['sum']/hourData[h]['valid-cnt'])\n                                                     : hourData[h]['sum']\n                else  wholedayData[h] = undefined\n            }\n            this.wholedayData = wholedayData\n            this.hourData = hourData\n        },\n\n        createChartData(mode) {\n            this.labels = []\n            this.data = []\n            var h\n            if(mode==null) {\n                for(h=0; h<24; h++) {\n                    this.labels.push(String(h)+':00')\n                    this.data.push(this.wholedayData[h])\n                }\n            }\n            else {\n                h = mode\n                var minute\n                for(var m=0; m<60; m++) {\n                    if (String(m).length<2) {\n                        minute = '0'+String(m)\n                    }\n                    else minute = m\n                    this.labels.push(String(h)+':'+String(minute))\n                    if(this.hourData[h]!=undefined){\n                        var bpm = this.hourData[h][m]\n                        if(bpm==255)\n                            bpm = null\n                        this.data.push(bpm)\n                    }\n                        \n                }\n            }\n\n        },\n\n        async addLogsDb(logs) {\n            const band_id = this.$session.get('miband').id\n            const user_id = this.$session.get('user').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${band_id}/${user_id}/logs`, {\n                method: 'POST',\n                body: JSON.stringify(logs),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['add-logs-result']=='succeeded'){\n                    return true\n                }\n                else return false\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        async getDataByTimeApiCallDb(start, end) {\n            const userid = this.$session.get('user').id\n            const params = 'start='+start + '&end='+end\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/users/${userid}/logs/get-by-time?${params}`)\n                \n                const result = await response.json()\n                if(result['get-logs-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        getDatabyDateDb(inputdatestr) {\n            var today = new Date(inputdatestr)\n            var startTs, endTs, startstr, endstr\n            startTs = new Date(today.getFullYear(), today.getMonth(), today.getDate())\n            endTs = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59)\n            startstr = this.generateApiUTCTimeStr(startTs)\n            endstr = this.generateApiUTCTimeStr(endTs)\n            \n            this.getDataByTimeApiCallDb(startstr, endstr).then((result)=>{\n                this.activitydata  = result\n                this.getDataStatus = \"OK\"\n            })\n            this.getDataStatus = \"PENDING\"\n\n        },\n\n        async getLastFetchingDataTimestampDb() {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${bandid}/last-fetch-time`)\n                const result = await response.json()\n                if(result['get-timestamp-result']=='succeeded'){\n                    return result['last-fetch-timestamp']\n                }\n                else return false\n            } catch (error){\n                console.log(error)\n            }\n        },\n        \n        async getDataFromLastTimestampMiband(){\n            const lastTsStr = await this.getLastFetchingDataTimestampDb()\n            \n            var lastTs\n            if(lastTsStr==''){\n                lastTs = new Date()\n            }\n            else {\n                lastTs = new Date(lastTsStr)           \n            }\n            const logs = await this.getDataMibandFrom(lastTs)\n            return logs\n        },\n\n        async addDataFromLastTimestampDb() {\n            const logs = await this.getDataFromLastTimestampMiband()\n            if(logs) {\n                if(Object.entries(logs).length!=0){\n                    var laststr = Object.keys(logs)[Object.keys(logs).length-1]\n\n                    this.convertLogsToUTC(logs)\n                    \n                    var add_result = await this.addLogsDb(logs)\n                    if(add_result) {\n                        this.setLastFetchingDataTimestampDb(laststr)\n\n                        this.lastGetDataTime = this.generateTimestampFromApiStr(laststr)\n                    }\n                }\n            }\n            \n        },\n\n        convertLogsToUTC(logs) {\n            for(var ts in logs) {\n                var timestamp = this.generateTimestampFromApiStr(ts)\n                var apiUTCStr = this.generateApiUTCTimeStr(timestamp)\n                logs[apiUTCStr] = logs[ts]\n                delete logs[ts]\n            }\n        },\n\n        generateApiUTCTimeStr(timestamp) {\n            var result, datestr, timestr, d, M, y, h, m\n            d = timestamp.getUTCDate()\n            M = timestamp.getUTCMonth()+1\n            y = timestamp.getUTCFullYear()\n            h = timestamp.getUTCHours()\n            m = timestamp.getUTCMinutes()\n            if(m<10) {\n                m = '0'+m\n            }\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            result = datestr + ' - ' + timestr\n            return result\n\n        },\n\n        generateApiTimeStr(timestamp) {\n            var result, datestr, timestr, d, M, y, h, m\n            d = timestamp.getDate()\n            //api string: real month | Date month system 0-11: 0: Jan, 1: Feb,...\n            //--> +1\n            M = timestamp.getMonth()+1\n            y = timestamp.getFullYear()\n            h = timestamp.getHours()\n            m = timestamp.getMinutes()\n            if(m<10) {\n                m = '0'+m\n            }\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            result = datestr + ' - ' + timestr\n            return result\n        },\n\n        generateTimestampFromApiStr(timestr) {\n            // dd.MM.yyyy - hh.mm\n            var result, d, M, y, h, m\n            d = timestr.slice(0,2)\n            //api string: real month | Date month system 0-11: 0: Jan, 1: Feb,...\n            //--> -1\n            M = parseInt(timestr.slice(3,5)) - 1\n            y = timestr.slice(6,10)\n            h = timestr.slice(13,15)\n            m = timestr.slice(16,18)\n            result = new Date(y, M, d, h, m)\n            return result\n        },\n\n        async getDataMibandFrom(timestamp) {\n            var start, end\n            start = this.generateApiTimeStr(timestamp)\n            end = this.generateApiTimeStr(new Date())\n            const params = 'start='+start + '&end='+end\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/band/activitydata?${params}`)\n                const result = await response.json()\n                if(result['log-data-result']=='succeeded'){\n                    return result['logs']\n                }\n                else return false\n            }\n            catch (error) {\n                console.log(error);\n            }\n            \n        },\n\n        async setLastFetchingDataTimestampDb(last){\n            const timestamp = this.generateTimestampFromApiStr(last)\n            const utcStr = this.generateApiUTCTimeStr(timestamp)\n            const bandid = this.$session.get('miband').id\n            try{\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${bandid}/last-fetch-time`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'last': utcStr\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = response.json()\n                if(result['set-timestamp-result']=='succeeded') {\n                    return true\n                }\n                return false\n            }\n            catch (error) {\n                console.log(error)\n            }\n        },\n\n        removeHourRange(){\n            this.hourvalue = null\n            this.createChartData()\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components/data"}]}