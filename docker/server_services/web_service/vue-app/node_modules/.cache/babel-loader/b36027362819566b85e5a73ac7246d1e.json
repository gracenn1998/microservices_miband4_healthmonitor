{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue","mtime":1607175226173},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2dyYWNlL3BqL21pY3Jvc2VydmljZXNfbWliYW5kNF9oZWFsdGhtb25pdG9yL2Zyb250ZW5kL3Z1ZS1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgRGF0YUNoYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9kYXRhL0RhdGFDaGFydCc7CnZhciBtaWJhbmRfZGJfaG9zdCA9ICcxOTIuMTY4LjExLjEyMic7CnZhciBtaWJhbmRfZGJfcG9ydCA9ICc1MDAyJzsKdmFyIHRvZGF5ID0gbmV3IERhdGUoKTsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIERhdGFDaGFydDogRGF0YUNoYXJ0CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aXZpdHlkYXRhOiB7fSwKICAgICAgd2hvbGVkYXlEYXRhOiB7fSwKICAgICAgaG91ckRhdGE6IHt9LAogICAgICBsYWJlbHM6IFtdLAogICAgICBkYXRhOiBbXSwKICAgICAgbW9kZTogLTEsCiAgICAgIGRhdGV2YWx1ZTogdG9kYXkuZ2V0RnVsbFllYXIoKSArICctJyArIFN0cmluZyh0b2RheS5nZXRNb250aCgpICsgMSkgKyAnLScgKyB0b2RheS5nZXREYXRlKCksCiAgICAgIGhvdXJ2YWx1ZTogbnVsbCwKICAgICAgY2hhcnRrZXk6IGZhbHNlLAogICAgICBnZXREYXRhU3RhdHVzOiAnJwogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmdldERhdGFieURhdGUodGhpcy5kYXRldmFsdWUpOwogICAgdGhpcy5nZXRIUkRhdGEoKTsgLy8gdGhpcy5jcmVhdGVDaGFydERhdGEoKQogICAgLy8gdGhpcy5jaGFydGtleSA9ICF0aGlzLmNoYXJ0a2V5CiAgfSwKICB3YXRjaDogewogICAgZGF0ZXZhbHVlOiBmdW5jdGlvbiBkYXRldmFsdWUoKSB7CiAgICAgIHRoaXMuZ2V0RGF0YWJ5RGF0ZSh0aGlzLmRhdGV2YWx1ZSk7CiAgICB9LAogICAgZ2V0RGF0YVN0YXR1czogZnVuY3Rpb24gZ2V0RGF0YVN0YXR1cygpIHsKICAgICAgaWYgKHRoaXMuZ2V0RGF0YVN0YXR1cyA9PSAnT0snKSB7CiAgICAgICAgdGhpcy5nZXRIUkRhdGEoKTsKICAgICAgICB0aGlzLmNyZWF0ZUNoYXJ0RGF0YSgpOwogICAgICB9CiAgICB9LAogICAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgICAgdGhpcy5jaGFydGtleSA9ICF0aGlzLmNoYXJ0a2V5OwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0SFJEYXRhOiBmdW5jdGlvbiBnZXRIUkRhdGEoKSB7CiAgICAgIHZhciBsb2dzID0gdGhpcy5hY3Rpdml0eWRhdGE7CiAgICAgIHZhciBob3VyRGF0YSA9IHt9OwoKICAgICAgZm9yICh2YXIgaSBpbiBsb2dzKSB7CiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IGxvZ3NbaV0udGltZXN0YW1wOwogICAgICAgIHZhciB0bXAgPSBuZXcgRGF0ZSh0aW1lc3RhbXApOwogICAgICAgIHZhciBob3VyID0gdG1wLmdldEhvdXJzKCk7CiAgICAgICAgdmFyIG1pbnV0ZSA9IHRtcC5nZXRNaW51dGVzKCk7IC8vIGRhdGFPZkhvdXJbImFzZCJdID0gImFzZCIKCiAgICAgICAgaWYgKGhvdXJEYXRhW1N0cmluZyhob3VyKV0gPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBob3VyRGF0YVtTdHJpbmcoaG91cildID0ge307CiAgICAgICAgICBob3VyRGF0YVtTdHJpbmcoaG91cildWydzdW0nXSA9IDA7CiAgICAgICAgICBob3VyRGF0YVtTdHJpbmcoaG91cildWyd2YWxpZC1jbnQnXSA9IDA7CiAgICAgICAgfQoKICAgICAgICB2YXIgaHIgPSBsb2dzW2ldLmhlYXJ0cmF0ZTsKICAgICAgICBob3VyRGF0YVtTdHJpbmcoaG91cildW1N0cmluZyhtaW51dGUpXSA9IGhyOwoKICAgICAgICBpZiAoaHIgIT0gMjU1KSB7CiAgICAgICAgICBob3VyRGF0YVtTdHJpbmcoaG91cildWydzdW0nXSArPSBocjsKICAgICAgICAgIGhvdXJEYXRhW1N0cmluZyhob3VyKV1bJ3ZhbGlkLWNudCddKys7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgd2hvbGVkYXlEYXRhID0ge307CgogICAgICBmb3IgKHZhciBoID0gMDsgaCA8IDI0OyBoKyspIHsKICAgICAgICBpZiAoaG91ckRhdGFbaF0gIT0gdW5kZWZpbmVkKSB3aG9sZWRheURhdGFbaF0gPSBNYXRoLnJvdW5kKGhvdXJEYXRhW2hdWydzdW0nXSAvIGhvdXJEYXRhW2hdWyd2YWxpZC1jbnQnXSk7ZWxzZSB3aG9sZWRheURhdGFbaF0gPSB1bmRlZmluZWQ7CiAgICAgIH0KCiAgICAgIHRoaXMud2hvbGVkYXlEYXRhID0gd2hvbGVkYXlEYXRhOwogICAgICB0aGlzLmhvdXJEYXRhID0gaG91ckRhdGE7CiAgICB9LAogICAgY3JlYXRlQ2hhcnREYXRhOiBmdW5jdGlvbiBjcmVhdGVDaGFydERhdGEobW9kZSkgewogICAgICB0aGlzLmxhYmVscyA9IFtdOwogICAgICB0aGlzLmRhdGEgPSBbXTsKICAgICAgdmFyIGg7CgogICAgICBpZiAobW9kZSA9PSBudWxsKSB7CiAgICAgICAgZm9yIChoID0gMDsgaCA8IDI0OyBoKyspIHsKICAgICAgICAgIHRoaXMubGFiZWxzLnB1c2goU3RyaW5nKGgpICsgJzowMCcpOwogICAgICAgICAgdGhpcy5kYXRhLnB1c2godGhpcy53aG9sZWRheURhdGFbaF0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBoID0gbW9kZTsKICAgICAgICB2YXIgbWludXRlOwoKICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IDYwOyBtKyspIHsKICAgICAgICAgIGlmIChTdHJpbmcobSkubGVuZ3RoIDwgMikgewogICAgICAgICAgICBtaW51dGUgPSAnMCcgKyBTdHJpbmcobSk7CiAgICAgICAgICB9IGVsc2UgbWludXRlID0gbTsKCiAgICAgICAgICB0aGlzLmxhYmVscy5wdXNoKFN0cmluZyhoKSArICc6JyArIFN0cmluZyhtaW51dGUpKTsKCiAgICAgICAgICBpZiAodGhpcy5ob3VyRGF0YVtoXSAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdmFyIGJwbSA9IHRoaXMuaG91ckRhdGFbaF1bbV07CiAgICAgICAgICAgIGlmIChicG0gPT0gMjU1KSBicG0gPSBudWxsOwogICAgICAgICAgICB0aGlzLmRhdGEucHVzaChicG0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldERhdGFCeVRpbWVBcGlDYWxsOiBmdW5jdGlvbiBnZXREYXRhQnlUaW1lQXBpQ2FsbChzdGFydCwgZW5kKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBiYW5kaWQsIHJlc3BvbnNlLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgYmFuZGlkID0gX3RoaXMuJHNlc3Npb24uZ2V0KCdtaWJhbmQnKS5pZDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goImh0dHA6Ly8iLmNvbmNhdChtaWJhbmRfZGJfaG9zdCwgIjoiKS5jb25jYXQobWliYW5kX2RiX3BvcnQsICIvZ2V0bG9nc2J5dGltZS8iKS5jb25jYXQoYmFuZGlkKSwgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICdzdGFydCc6IHN0YXJ0LAogICAgICAgICAgICAgICAgICAgICdlbmQnOiBlbmQKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEocmVzdWx0WydnZXQtbG9ncy1yZXN1bHQnXSA9PT0gJ3N1Y2NlZWRlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0Wydsb2dzJ10pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzOwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgMTNdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldERhdGFieURhdGU6IGZ1bmN0aW9uIGdldERhdGFieURhdGUoaW5wdXRkYXRlc3RyKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShpbnB1dGRhdGVzdHIpOwogICAgICB2YXIgZGF5LCBtb250aCwgeWVhciwgZGF0ZXN0ciwgc3RhcnRzdHIsIGVuZHN0cjsKICAgICAgZGF5ID0gZGF0ZS5nZXREYXRlKCk7CiAgICAgIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKICAgICAgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgZGF0ZXN0ciA9IGRheSArICcuJyArIG1vbnRoICsgJy4nICsgeWVhcjsKICAgICAgc3RhcnRzdHIgPSBkYXRlc3RyICsgJyAtIDA6MDAnOwogICAgICBlbmRzdHIgPSBkYXRlc3RyICsgJyAtIDIzOjU5JzsKICAgICAgdGhpcy5nZXREYXRhQnlUaW1lQXBpQ2FsbChzdGFydHN0ciwgZW5kc3RyKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBfdGhpczIuYWN0aXZpdHlkYXRhID0gcmVzdWx0OwogICAgICAgIF90aGlzMi5nZXREYXRhU3RhdHVzID0gIk9LIjsKICAgICAgfSk7CiAgICAgIHRoaXMuZ2V0RGF0YVN0YXR1cyA9ICJQRU5ESU5HIjsKICAgIH0sCiAgICByZW1vdmVIb3VyUmFuZ2U6IGZ1bmN0aW9uIHJlbW92ZUhvdXJSYW5nZSgpIHsKICAgICAgdGhpcy5ob3VydmFsdWUgPSBudWxsOwogICAgICB0aGlzLmNyZWF0ZUNoYXJ0RGF0YSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["HeartRate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div>\n            <b-form inline class=\"d-flex justify-content-between\">\n                <b-form-datepicker id=\"example-datepicker\" v-model=\"datevalue\" class=\"mb-2 w-50\"></b-form-datepicker>\n                \n                <div>\n                    Hour range:\n                    <b-form-spinbutton inline wrap min=\"0\" max=\"23\" v-model=\"hourvalue\"></b-form-spinbutton>\n                    <b-button class=\"ml-1\" variant=\"success\" @click=\"createChartData(hourvalue)\">v</b-button>\n                    <b-button class=\"ml-1\" @click=\"removeHourRange\">x</b-button>\n                </div>\n                \n            </b-form>\n        </div>\n\n        <div v-if=\"getDataStatus === 'PENDING'\">\n            <b-alert variant=\"info\" show>Getting data...</b-alert>\n        </div>\n        \n        <b-skeleton-wrapper :loading=\"getDataStatus === 'PENDING'\">\n            <template #loading>\n                <b-card>\n                <b-skeleton width=\"85%\"></b-skeleton>\n                <b-skeleton width=\"55%\"></b-skeleton>\n                <b-skeleton width=\"70%\"></b-skeleton>\n                </b-card>\n            </template>\n            <div class=\"h-50\">\n                <DataChart :key=\"chartkey\" :data=\"data\" :labels=\"labels\" :type=\"'hr'\"/>\n            </div>\n        </b-skeleton-wrapper>\n    </div>\n</template>\n\n\n<script>\nimport DataChart from '@/components/data/DataChart'\n\nconst miband_db_host='192.168.11.122'\nconst miband_db_port='5002'\n\nvar today = new Date()\n\nexport default {\n    components: { DataChart },\n    data(){\n        return {\n            activitydata: {},\n            wholedayData: {},\n            hourData: {},\n            labels: [],\n            data: [],\n            mode: -1,\n            datevalue: today.getFullYear() + '-' + String(today.getMonth()+1) + '-' + today.getDate(),\n            hourvalue: null,\n            chartkey: false,\n            getDataStatus: ''\n        }\n    },\n    mounted(){\n        this.getDatabyDate(this.datevalue)\n        this.getHRData()\n        // this.createChartData()\n        // this.chartkey = !this.chartkey\n    },\n\n    watch: {\n        datevalue: function() {\n            this.getDatabyDate(this.datevalue)\n        },\n        getDataStatus: function() {\n            if(this.getDataStatus=='OK') {\n                this.getHRData()\n                this.createChartData()                    \n            }\n        },\n        data: function() {\n            this.chartkey = !this.chartkey\n        },\n    },\n\n    methods: {\n        getHRData() {\n            var logs = this.activitydata\n            var hourData = {}\n\n            for(var i in logs) {\n                var timestamp = logs[i].timestamp\n                var tmp = new Date(timestamp)\n                var hour = tmp.getHours()\n                var minute = tmp.getMinutes()\n                // dataOfHour[\"asd\"] = \"asd\"\n                if(hourData[String(hour)]==undefined){\n                    hourData[String(hour)] = {}\n                    hourData[String(hour)]['sum'] = 0\n                    hourData[String(hour)]['valid-cnt']=0\n                }\n                var hr = logs[i].heartrate\n                hourData[String(hour)][String(minute)] = hr\n                if(hr!=255) {\n                    hourData[String(hour)]['sum']+=hr\n                    hourData[String(hour)]['valid-cnt']++\n                }\n            }\n\n            var wholedayData = {}\n            for(var h=0; h<24; h++){\n                if(hourData[h]!=undefined)\n                    wholedayData[h] = Math.round(hourData[h]['sum']/hourData[h]['valid-cnt'])\n                else  wholedayData[h] = undefined\n            }\n            this.wholedayData = wholedayData\n            this.hourData = hourData\n        },\n\n        createChartData(mode) {\n            this.labels = []\n            this.data = []\n            var h\n            if(mode==null) {\n                for(h=0; h<24; h++) {\n                    this.labels.push(String(h)+':00')\n                    this.data.push(this.wholedayData[h])\n                }\n            }\n            else {\n                h = mode\n                var minute\n                for(var m=0; m<60; m++) {\n                    if (String(m).length<2) {\n                        minute = '0'+String(m)\n                    }\n                    else minute = m\n                    this.labels.push(String(h)+':'+String(minute))\n                    if(this.hourData[h]!=undefined){\n                        var bpm = this.hourData[h][m]\n                        if(bpm==255)\n                            bpm = null\n                        this.data.push(bpm)\n                    }\n                        \n                }\n            }\n\n        },\n\n        async getDataByTimeApiCall(start, end) {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${miband_db_host}:${miband_db_port}/getlogsbytime/${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'start': start,\n                    'end': end\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                \n                const result = await response.json()\n                if(result['get-logs-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        getDatabyDate(inputdatestr) {\n            var date = new Date(inputdatestr)\n            var day, month, year, datestr, startstr, endstr\n            day = date.getDate()\n            month = date.getMonth()+1\n            year = date.getFullYear()\n            datestr = day + '.' + month + '.' + year\n            startstr = datestr + ' - 0:00'\n            endstr = datestr + ' - 23:59'\n            this.getDataByTimeApiCall(startstr, endstr).then((result)=>{\n                this.activitydata  = result \n                this.getDataStatus = \"OK\"\n            })\n            this.getDataStatus = \"PENDING\"\n\n        },\n\n        removeHourRange(){\n            this.hourvalue = null\n            this.createChartData()\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components/data"}]}