{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/eslint-loader/index.js??ref--13-0!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandDb.js","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandDb.js","mtime":1608333072937},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/api_calls/MibandDb.js"],"names":["miband_db_api_host","miband_db_host","miband_db_api_port","miband_db_port","pairNewBandDtbApiCall","uid","miband","bodydata","key","fetch","method","body","JSON","stringify","headers","response","json","result","console","error","pairAvailableBandDtbApiCall","band_id","id","getBandBySerial","serial","params","log","getUserBandInfo","getUserLogByTimeDbApiCall","start","end","getLastFetchingDataTimestampDbApiCall","bid","setLastFetchingDataTimestampDbApiCall","last","utcStr","addLogsDbApiCall","logs","unpairBandDbApiCall","deleteUserLogsApiCall"],"mappings":"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","sourcesContent":["import {miband_db_api_host as miband_db_host, miband_db_api_port as miband_db_port} from './ApiConfig.js'\n\nexport async function pairNewBandDtbApiCall(uid, miband) {\n    const bodydata = {}\n    for (var key in miband) {\n      bodydata[key] = miband[key]\n    }\n    bodydata['user_id'] = uid\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands`, {\n        method: 'POST',\n        body: JSON.stringify(\n            bodydata\n            ),\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n        })\n        const result = await response.json()\n        if(result['add-band-result']=='succeeded') {\n          return result['band-info']\n        }\n        else return false\n    } catch (error) {\n        console.error(error)\n    }\n}\n\nexport async function pairAvailableBandDtbApiCall(uid, miband) {\n    const band_id = miband.id\n    const bodydata = {}\n    for (var key in miband) {\n      bodydata[key] = miband[key]\n    }\n    bodydata['user_id'] = uid\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/${band_id}/update-new-user`, {\n        method: 'PUT',\n        body: JSON.stringify(\n            bodydata\n            ),\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n        })\n        const result = await response.json()\n        if(result['add-band-result']=='succeeded') {\n          return result['band-info']\n        }\n        else return false\n    } catch (error) {\n        console.error(error)\n    }\n}\n\nexport async function getBandBySerial(serial) {\n  const params = 'serial='+serial\n  try {\n    const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/find-by-serial?${params}`)\n    const result = await response.json()\n    if(result['get-band-result']=='succeeded'){\n      return result['band-info']\n    }\n    else return false\n  }\n  catch (error){\n    console.log(error)\n  }\n}\n\n\nexport async function getUserBandInfo(uid) {\n    const params = '?user_id='+uid\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/find-by-userid${params}`)\n        const result = await response.json()\n        if(result['get-band-result']=='succeeded'){\n        return result['band-info']\n        }\n        return false\n    } catch (error) {\n        // do something with `error`\n    }\n}\n\nexport async function getUserLogByTimeDbApiCall(uid, start, end) {\n    const params = 'start='+start + '&end='+end\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/users/${uid}/logs/get-by-time?${params}`)\n        \n        const result = await response.json()\n        if(result['get-logs-result']==='succeeded')\n            return result['logs']\n        return false\n    } catch (error) {\n        // do something with `error`\n    }\n}\n\nexport async function getLastFetchingDataTimestampDbApiCall(bid) {\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/${bid}/last-fetch-time`)\n        const result = await response.json()\n        if(result['get-timestamp-result']=='succeeded'){\n            return result['last-fetch-timestamp']\n        }\n        else return false\n    } catch (error){\n        console.log(error)\n    }\n}\n\nexport async function setLastFetchingDataTimestampDbApiCall(bid, last){\n    try{\n        const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${bid}/last-fetch-time`, {\n        method: 'POST',\n        body: JSON.stringify({\n            'last': utcStr\n            }),\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n        })\n        const result = response.json()\n        if(result['set-timestamp-result']=='succeeded') {\n            return true\n        }\n        return false\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport async function addLogsDbApiCall(uid, bid, logs) {\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/${bid}/${uid}/logs`, {\n        method: 'POST',\n        body: JSON.stringify(logs),\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n        })\n        const result = await response.json()\n        if(result['add-logs-result']=='succeeded'){\n            return true\n        }\n        else return false\n    } catch (error) {\n        console.error(error)\n    }\n}\n\nexport async function unpairBandDbApiCall(bid) {\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/bands/${bid}/unpair`)\n        const result = await response.json()\n\n        // do something with `data`\n        if(result['unpair-band-result']==\"succeeded\")\n            return true\n        else return false\n    } catch (error) {\n        // do something with `error`\n    }\n}\n\nexport async function deleteUserLogsApiCall(uid) {\n    try {\n        const response = await fetch(`http://${miband_db_host}:${miband_db_port}/users/${uid}/logs`, {\n            method: 'DELETE'\n        })\n        const result = await response.json()\n        if(result['delete-result']=='succeeded') {\n            return true\n        }\n        return false\n    }\n    catch (error) {\n        console.log(error)\n    }\n}"]}]}