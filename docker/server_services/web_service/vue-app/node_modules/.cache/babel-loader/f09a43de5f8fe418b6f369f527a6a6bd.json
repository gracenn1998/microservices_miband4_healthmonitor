{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue","mtime":1607244314485},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HeartRate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div>\n            <b-form inline class=\"d-flex justify-content-between\">\n                <b-form-datepicker id=\"example-datepicker\" v-model=\"datevalue\" class=\"mb-2 w-50\"></b-form-datepicker>\n                \n                <div>\n                    Hour range:\n                    <b-form-spinbutton inline wrap min=\"0\" max=\"23\" v-model=\"hourvalue\"></b-form-spinbutton>\n                    <b-button class=\"ml-1\" variant=\"success\" @click=\"createChartData(hourvalue)\">v</b-button>\n                    <b-button class=\"ml-1\" @click=\"removeHourRange\">x</b-button>\n                </div>\n                \n            </b-form>\n        </div>\n\n        <div v-if=\"getDataStatus === 'PENDING'\">\n            <b-alert variant=\"info\" show>Getting data...</b-alert>\n        </div>\n        \n        <b-skeleton-wrapper :loading=\"getDataStatus === 'PENDING'\">\n            <template #loading>\n                <b-card>\n                <b-skeleton width=\"85%\"></b-skeleton>\n                <b-skeleton width=\"55%\"></b-skeleton>\n                <b-skeleton width=\"70%\"></b-skeleton>\n                </b-card>\n            </template>\n            <div class=\"h-50\">\n                <DataChart :key=\"chartkey\" :data=\"data\" :labels=\"labels\" :type=\"'hr'\"/>\n            </div>\n        </b-skeleton-wrapper>\n    </div>\n</template>\n\n\n<script>\nimport DataChart from '@/components/data/DataChart'\n\n\nvar today = new Date()\n\nexport default {\n    components: { DataChart },\n    data(){\n        return {\n            activitydata: {},\n            wholedayData: {},\n            hourData: {},\n            labels: [],\n            data: [],\n            mode: -1,\n            datevalue: today.getFullYear() + '-' + String(today.getMonth()+1) + '-' + today.getDate(),\n            hourvalue: null,\n            chartkey: false,\n            getDataStatus: '',\n            miband_host: this.$api_hosts['miband_api'],\n            miband_port: this.$api_ports['miband_api'],\n            miband_db_host: this.$api_hosts['miband_db_api'],\n            miband_db_port: this.$api_ports['miband_db_api'],\n        }\n    },\n    mounted(){\n        // this.getDataFromLastTimestamp() \n        this.addDataFromLastTimestampDb()\n        this.getDatabyDate(this.datevalue)\n        // this.addTodayActivityDataDtb()\n        this.getHRData()\n        // this.createChartData()\n        // this.chartkey = !this.chartkey\n    },\n\n    watch: {\n        datevalue: function() {\n            this.getDatabyDate(this.datevalue)\n        },\n        getDataStatus: function() {\n            if(this.getDataStatus=='OK') {\n                this.getHRData()\n                this.createChartData()                    \n            }\n        },\n        data: function() {\n            this.chartkey = !this.chartkey\n        },\n    },\n\n    methods: {\n        async getTodayActivityApiCall() {\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/logdatatoday`)\n                const result = await response.json()\n                if(result['log-data-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        async addLogsDb(logs) {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/addlogs?band_id=${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify(logs),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['add-logs-result']=='succeeded'){\n                    return true\n                }\n                else return false\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        addTodayActivityDataDtb() {\n            this.getTodayActivityApiCall().then((result)=>{\n                console.log(result)\n                if(result) {\n                    this.addLogsDb(result)\n                }\n            })\n        },\n\n        getHRData() {\n            var logs = this.activitydata\n            var hourData = {}\n\n            for(var i in logs) {\n                var timestamp = logs[i].timestamp\n                var tmp = new Date(timestamp)\n                var hour = tmp.getHours()\n                var minute = tmp.getMinutes()\n                // dataOfHour[\"asd\"] = \"asd\"\n                if(hourData[String(hour)]==undefined){\n                    hourData[String(hour)] = {}\n                    hourData[String(hour)]['sum'] = 0\n                    hourData[String(hour)]['valid-cnt']=0\n                }\n                var hr = logs[i].heartrate\n                hourData[String(hour)][String(minute)] = hr\n                if(hr!=255) {\n                    hourData[String(hour)]['sum']+=hr\n                    hourData[String(hour)]['valid-cnt']++\n                }\n            }\n\n            var wholedayData = {}\n            for(var h=0; h<24; h++){\n                if(hourData[h]!=undefined)\n                    wholedayData[h] = Math.round(hourData[h]['sum']/hourData[h]['valid-cnt'])\n                else  wholedayData[h] = undefined\n            }\n            this.wholedayData = wholedayData\n            this.hourData = hourData\n        },\n\n        createChartData(mode) {\n            this.labels = []\n            this.data = []\n            var h\n            if(mode==null) {\n                for(h=0; h<24; h++) {\n                    this.labels.push(String(h)+':00')\n                    this.data.push(this.wholedayData[h])\n                }\n            }\n            else {\n                h = mode\n                var minute\n                for(var m=0; m<60; m++) {\n                    if (String(m).length<2) {\n                        minute = '0'+String(m)\n                    }\n                    else minute = m\n                    this.labels.push(String(h)+':'+String(minute))\n                    if(this.hourData[h]!=undefined){\n                        var bpm = this.hourData[h][m]\n                        if(bpm==255)\n                            bpm = null\n                        this.data.push(bpm)\n                    }\n                        \n                }\n            }\n\n        },\n\n        async getDataByTimeApiCall(start, end) {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/getlogsbytime/${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'start': start,\n                    'end': end\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                \n                const result = await response.json()\n                if(result['get-logs-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        getDatabyDate(inputdatestr) {\n            var date = new Date(inputdatestr)\n            var day, month, year, datestr, startstr, endstr\n            day = date.getDate()\n            month = date.getMonth()+1\n            year = date.getFullYear()\n            datestr = day + '.' + month + '.' + year\n            startstr = datestr + ' - 0:00'\n            endstr = datestr + ' - 23:59'\n            this.getDataByTimeApiCall(startstr, endstr).then((result)=>{\n                this.activitydata  = result \n                this.getDataStatus = \"OK\"\n            })\n            this.getDataStatus = \"PENDING\"\n\n        },\n\n        async getLastFetchingDataTimestamp() {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/lastfetchtime/${bandid}`)\n                const result = await response.json()\n                if(result['get-timestamp-result']=='succeeded'){\n                    return result['last-fetch-timestamp']\n                }\n                else return false\n            } catch (error){\n                console.log(error)\n            }\n        },\n\n        addDataFromLastTimestampDb() {\n            var date\n            this.getLastFetchingDataTimestamp().then((result)=>{\n                if(result==''){\n                    date = new Date()\n                }\n                else {\n                    date = new Date(result)\n                    // console.log(date.toDateString())\n                    // datestr = date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear()\n                    // console.log(datestr)                \n                }\n                // console.log(datestr)\n                this.getDataFromMiband(date).then((result)=>{\n                    if(result){\n                        var logs = result\n                        if(Object.entries(logs).length!=0){\n                            var laststr = Object.keys(logs)[Object.keys(logs).length-1]\n                            this.addLogsDb(logs)\n                            this.setLastFetchingDataTimestampDb(laststr)\n                        }\n                        // console.log(result)\n                        return result\n                    }\n                    return false\n                })\n            })\n        },\n\n        async getDataFromMiband(lastfetchtime) {\n            var start, end, date, datestr, timestr, d, M, y, h, m\n            date = lastfetchtime\n            d = date.getDate()\n            M = date.getMonth()+1\n            y = date.getFullYear()\n            h = date.getHours()\n            m = date.getMinutes()\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            start = datestr + ' - ' + timestr\n\n            date = new Date()\n            d = date.getDate()\n            m = date.getMonth()+1\n            y = date.getFullYear()\n            datestr = d + '.' + m + '.' + y\n            end = datestr + ' - 23:59'\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/logdata`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'start': start,\n                    'end': end\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['log-data-result']=='succeeded'){\n                    return result['logs']\n                }\n                else return false\n            }\n            catch (error) {\n                console.log(error);\n            }\n            \n        },\n\n        async setLastFetchingDataTimestampDb(last){\n            const bandid = this.$session.get('miband').id\n            try{\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/lastfetchtime/${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'last': last\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = response.json()\n                if(result['set-timestamp-result']=='succeeded') {\n                    return true\n                }\n                return false\n            }\n            catch (error) {\n                console.log(error)\n            }\n        },\n\n        removeHourRange(){\n            this.hourvalue = null\n            this.createChartData()\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components/data"}]}