{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/HeartRate.vue","mtime":1607244314485},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HeartRate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"HeartRate.vue","sourceRoot":"src/components/data","sourcesContent":["<template>\n    <div>\n        <div>\n            <b-form inline class=\"d-flex justify-content-between\">\n                <b-form-datepicker id=\"example-datepicker\" v-model=\"datevalue\" class=\"mb-2 w-50\"></b-form-datepicker>\n                \n                <div>\n                    Hour range:\n                    <b-form-spinbutton inline wrap min=\"0\" max=\"23\" v-model=\"hourvalue\"></b-form-spinbutton>\n                    <b-button class=\"ml-1\" variant=\"success\" @click=\"createChartData(hourvalue)\">v</b-button>\n                    <b-button class=\"ml-1\" @click=\"removeHourRange\">x</b-button>\n                </div>\n                \n            </b-form>\n        </div>\n\n        <div v-if=\"getDataStatus === 'PENDING'\">\n            <b-alert variant=\"info\" show>Getting data...</b-alert>\n        </div>\n        \n        <b-skeleton-wrapper :loading=\"getDataStatus === 'PENDING'\">\n            <template #loading>\n                <b-card>\n                <b-skeleton width=\"85%\"></b-skeleton>\n                <b-skeleton width=\"55%\"></b-skeleton>\n                <b-skeleton width=\"70%\"></b-skeleton>\n                </b-card>\n            </template>\n            <div class=\"h-50\">\n                <DataChart :key=\"chartkey\" :data=\"data\" :labels=\"labels\" :type=\"'hr'\"/>\n            </div>\n        </b-skeleton-wrapper>\n    </div>\n</template>\n\n\n<script>\nimport DataChart from '@/components/data/DataChart'\n\n\nvar today = new Date()\n\nexport default {\n    components: { DataChart },\n    data(){\n        return {\n            activitydata: {},\n            wholedayData: {},\n            hourData: {},\n            labels: [],\n            data: [],\n            mode: -1,\n            datevalue: today.getFullYear() + '-' + String(today.getMonth()+1) + '-' + today.getDate(),\n            hourvalue: null,\n            chartkey: false,\n            getDataStatus: '',\n            miband_host: this.$api_hosts['miband_api'],\n            miband_port: this.$api_ports['miband_api'],\n            miband_db_host: this.$api_hosts['miband_db_api'],\n            miband_db_port: this.$api_ports['miband_db_api'],\n        }\n    },\n    mounted(){\n        // this.getDataFromLastTimestamp() \n        this.addDataFromLastTimestampDb()\n        this.getDatabyDate(this.datevalue)\n        // this.addTodayActivityDataDtb()\n        this.getHRData()\n        // this.createChartData()\n        // this.chartkey = !this.chartkey\n    },\n\n    watch: {\n        datevalue: function() {\n            this.getDatabyDate(this.datevalue)\n        },\n        getDataStatus: function() {\n            if(this.getDataStatus=='OK') {\n                this.getHRData()\n                this.createChartData()                    \n            }\n        },\n        data: function() {\n            this.chartkey = !this.chartkey\n        },\n    },\n\n    methods: {\n        async getTodayActivityApiCall() {\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/logdatatoday`)\n                const result = await response.json()\n                if(result['log-data-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        async addLogsDb(logs) {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/addlogs?band_id=${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify(logs),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['add-logs-result']=='succeeded'){\n                    return true\n                }\n                else return false\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        addTodayActivityDataDtb() {\n            this.getTodayActivityApiCall().then((result)=>{\n                console.log(result)\n                if(result) {\n                    this.addLogsDb(result)\n                }\n            })\n        },\n\n        getHRData() {\n            var logs = this.activitydata\n            var hourData = {}\n\n            for(var i in logs) {\n                var timestamp = logs[i].timestamp\n                var tmp = new Date(timestamp)\n                var hour = tmp.getHours()\n                var minute = tmp.getMinutes()\n                // dataOfHour[\"asd\"] = \"asd\"\n                if(hourData[String(hour)]==undefined){\n                    hourData[String(hour)] = {}\n                    hourData[String(hour)]['sum'] = 0\n                    hourData[String(hour)]['valid-cnt']=0\n                }\n                var hr = logs[i].heartrate\n                hourData[String(hour)][String(minute)] = hr\n                if(hr!=255) {\n                    hourData[String(hour)]['sum']+=hr\n                    hourData[String(hour)]['valid-cnt']++\n                }\n            }\n\n            var wholedayData = {}\n            for(var h=0; h<24; h++){\n                if(hourData[h]!=undefined)\n                    wholedayData[h] = Math.round(hourData[h]['sum']/hourData[h]['valid-cnt'])\n                else  wholedayData[h] = undefined\n            }\n            this.wholedayData = wholedayData\n            this.hourData = hourData\n        },\n\n        createChartData(mode) {\n            this.labels = []\n            this.data = []\n            var h\n            if(mode==null) {\n                for(h=0; h<24; h++) {\n                    this.labels.push(String(h)+':00')\n                    this.data.push(this.wholedayData[h])\n                }\n            }\n            else {\n                h = mode\n                var minute\n                for(var m=0; m<60; m++) {\n                    if (String(m).length<2) {\n                        minute = '0'+String(m)\n                    }\n                    else minute = m\n                    this.labels.push(String(h)+':'+String(minute))\n                    if(this.hourData[h]!=undefined){\n                        var bpm = this.hourData[h][m]\n                        if(bpm==255)\n                            bpm = null\n                        this.data.push(bpm)\n                    }\n                        \n                }\n            }\n\n        },\n\n        async getDataByTimeApiCall(start, end) {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/getlogsbytime/${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'start': start,\n                    'end': end\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                \n                const result = await response.json()\n                if(result['get-logs-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        getDatabyDate(inputdatestr) {\n            var date = new Date(inputdatestr)\n            var day, month, year, datestr, startstr, endstr\n            day = date.getDate()\n            month = date.getMonth()+1\n            year = date.getFullYear()\n            datestr = day + '.' + month + '.' + year\n            startstr = datestr + ' - 0:00'\n            endstr = datestr + ' - 23:59'\n            this.getDataByTimeApiCall(startstr, endstr).then((result)=>{\n                this.activitydata  = result \n                this.getDataStatus = \"OK\"\n            })\n            this.getDataStatus = \"PENDING\"\n\n        },\n\n        async getLastFetchingDataTimestamp() {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/lastfetchtime/${bandid}`)\n                const result = await response.json()\n                if(result['get-timestamp-result']=='succeeded'){\n                    return result['last-fetch-timestamp']\n                }\n                else return false\n            } catch (error){\n                console.log(error)\n            }\n        },\n\n        addDataFromLastTimestampDb() {\n            var date\n            this.getLastFetchingDataTimestamp().then((result)=>{\n                if(result==''){\n                    date = new Date()\n                }\n                else {\n                    date = new Date(result)\n                    // console.log(date.toDateString())\n                    // datestr = date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear()\n                    // console.log(datestr)                \n                }\n                // console.log(datestr)\n                this.getDataFromMiband(date).then((result)=>{\n                    if(result){\n                        var logs = result\n                        if(Object.entries(logs).length!=0){\n                            var laststr = Object.keys(logs)[Object.keys(logs).length-1]\n                            this.addLogsDb(logs)\n                            this.setLastFetchingDataTimestampDb(laststr)\n                        }\n                        // console.log(result)\n                        return result\n                    }\n                    return false\n                })\n            })\n        },\n\n        async getDataFromMiband(lastfetchtime) {\n            var start, end, date, datestr, timestr, d, M, y, h, m\n            date = lastfetchtime\n            d = date.getDate()\n            M = date.getMonth()+1\n            y = date.getFullYear()\n            h = date.getHours()\n            m = date.getMinutes()\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            start = datestr + ' - ' + timestr\n\n            date = new Date()\n            d = date.getDate()\n            m = date.getMonth()+1\n            y = date.getFullYear()\n            datestr = d + '.' + m + '.' + y\n            end = datestr + ' - 23:59'\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/logdata`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'start': start,\n                    'end': end\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['log-data-result']=='succeeded'){\n                    return result['logs']\n                }\n                else return false\n            }\n            catch (error) {\n                console.log(error);\n            }\n            \n        },\n\n        async setLastFetchingDataTimestampDb(last){\n            const bandid = this.$session.get('miband').id\n            try{\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/lastfetchtime/${bandid}`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'last': last\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = response.json()\n                if(result['set-timestamp-result']=='succeeded') {\n                    return true\n                }\n                return false\n            }\n            catch (error) {\n                console.log(error)\n            }\n        },\n\n        removeHourRange(){\n            this.hourvalue = null\n            this.createChartData()\n        }\n    }\n}\n</script>"]}]}