{"remainingRequest":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/DataType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/src/components/data/DataType.vue","mtime":1607529131342},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/grace/pj/microservices_miband4_healthmonitor/frontend/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"DataType.vue","sourceRoot":"src/components/data","sourcesContent":["<template>\n    <div>\n        <div>\n            <b-form inline class=\"d-flex justify-content-between\">\n                <b-form-datepicker id=\"example-datepicker\" v-model=\"datevalue\" class=\"mb-2 w-50\"></b-form-datepicker>\n                \n                <div>\n                    Hour range:\n                    <b-form-spinbutton inline wrap min=\"0\" max=\"23\" v-model=\"hourvalue\"></b-form-spinbutton>\n                    <b-button class=\"ml-1\" variant=\"success\" @click=\"createChartData(hourvalue)\">v</b-button>\n                    <b-button class=\"ml-1\" @click=\"removeHourRange\">x</b-button>\n                </div>\n                \n            </b-form>\n        </div>\n\n        <div v-if=\"getDataStatus === 'PENDING'\">\n            <b-alert variant=\"info\" show>Getting data...</b-alert>\n        </div>\n        \n        <b-skeleton-wrapper :loading=\"getDataStatus === 'PENDING'\">\n            <template #loading>\n                <b-card>\n                <b-skeleton width=\"85%\"></b-skeleton>\n                <b-skeleton width=\"55%\"></b-skeleton>\n                <b-skeleton width=\"70%\"></b-skeleton>\n                </b-card>\n            </template>\n            <div class=\"h-50\">\n                <DataChart :key=\"chartkey\" :data=\"data\" :labels=\"labels\" :type=\"type\"/>\n            </div>\n        </b-skeleton-wrapper>\n    </div>\n</template>\n\n\n<script>\nimport DataChart from '@/components/data/DataChart'\n\n\nvar today = new Date()\n\nexport default {\n    components: { DataChart },\n    props: ['type'],\n    data(){\n        return {\n            activitydata: {},\n            wholedayData: {},\n            hourData: {},\n            labels: [],\n            data: [],\n            mode: -1,\n            datevalue: today.getFullYear() + '-' + String(today.getMonth()+1) + '-' + today.getDate(),\n            hourvalue: null,\n            chartkey: false,\n            getDataStatus: '',\n            miband_host: this.$api_hosts['miband_api'],\n            miband_port: this.$api_ports['miband_api'],\n            miband_db_host: this.$api_hosts['miband_db_api'],\n            miband_db_port: this.$api_ports['miband_db_api'],\n            lastGetDataTime: null\n        }\n    },\n    mounted(){\n        this.addDataFromLastTimestampDb().then(()=>{\n            this.getDatabyDateDb(this.datevalue)\n        })\n\n        this.getDatabyDateDb(this.datevalue)\n        this.generateDataSet()\n    },\n\n    watch: {\n        datevalue: function() {\n            this.getDatabyDateDb(this.datevalue)\n        },\n        getDataStatus: function() {\n            if(this.getDataStatus=='OK') {\n                this.generateDataSet()\n                this.createChartData()                    \n            }\n        },\n        data: function() {\n            this.chartkey = !this.chartkey\n        },\n    },\n\n    methods: {\n        generateDataSet() {\n            var logs = this.activitydata\n            var hourData = {}\n\n            for(var i in logs) {\n                var timestamp = logs[i].timestamp\n                var tmp = new Date(timestamp)\n                var hour = tmp.getHours()\n                var minute = tmp.getMinutes()\n                // dataOfHour[\"asd\"] = \"asd\"\n                if(hourData[String(hour)]==undefined){\n                    hourData[String(hour)] = {}\n                    if(this.type=='hr'){\n                        hourData[String(hour)]['sum'] = 0\n                        hourData[String(hour)]['valid-cnt']=0\n                    }\n                    else if (this.type=='steps'){\n                        hourData[String(hour)]['sum'] = 0\n                    }\n                }\n                var hr = logs[i].heartrate\n                var steps = logs[i].steps\n                hourData[String(hour)][String(minute)] = this.type=='hr'? hr : steps\n                if(this.type=='hr'&& hr!=255){\n                    hourData[String(hour)]['sum']+=hr\n                    hourData[String(hour)]['valid-cnt']++\n                }\n                else if(this.type=='steps') {\n                    hourData[String(hour)]['sum']+=steps\n                }\n            }\n\n            var wholedayData = {}\n            for(var h=0; h<24; h++){\n                if(hourData[h]!=undefined)\n                    wholedayData[h] = this.type=='hr'? Math.round(hourData[h]['sum']/hourData[h]['valid-cnt'])\n                                                     : hourData[h]['sum']\n                else  wholedayData[h] = undefined\n            }\n            this.wholedayData = wholedayData\n            this.hourData = hourData\n        },\n\n        createChartData(mode) {\n            this.labels = []\n            this.data = []\n            var h\n            if(mode==null) {\n                for(h=0; h<24; h++) {\n                    this.labels.push(String(h)+':00')\n                    this.data.push(this.wholedayData[h])\n                }\n            }\n            else {\n                h = mode\n                var minute\n                for(var m=0; m<60; m++) {\n                    if (String(m).length<2) {\n                        minute = '0'+String(m)\n                    }\n                    else minute = m\n                    this.labels.push(String(h)+':'+String(minute))\n                    if(this.hourData[h]!=undefined){\n                        var bpm = this.hourData[h][m]\n                        if(bpm==255)\n                            bpm = null\n                        this.data.push(bpm)\n                    }\n                        \n                }\n            }\n\n        },\n\n        async addLogsDb(logs) {\n            const band_id = this.$session.get('miband').id\n            const user_id = this.$session.get('user').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${band_id}/${user_id}/logs`, {\n                method: 'POST',\n                body: JSON.stringify(logs),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = await response.json()\n                if(result['add-logs-result']=='succeeded'){\n                    return true\n                }\n                else return false\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        async getDataByTimeApiCallDb(start, end) {\n            const userid = this.$session.get('user').id\n            const params = 'start='+start + '&end='+end\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/users/${userid}/logs/get-by-time?${params}`)\n                \n                const result = await response.json()\n                if(result['get-logs-result']==='succeeded')\n                    return result['logs']\n                return false\n            } catch (error) {\n                // do something with `error`\n            }\n        },\n\n        getDatabyDateDb(inputdatestr) {\n            var today = new Date(inputdatestr)\n            var startTs, endTs, startstr, endstr\n            startTs = new Date(today.getFullYear(), today.getMonth(), today.getDate())\n            endTs = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59)\n            startstr = this.generateApiUTCTimeStr(startTs)\n            endstr = this.generateApiUTCTimeStr(endTs)\n            \n            this.getDataByTimeApiCallDb(startstr, endstr).then((result)=>{\n                this.activitydata  = result\n                this.getDataStatus = \"OK\"\n            })\n            this.getDataStatus = \"PENDING\"\n\n        },\n\n        async getLastFetchingDataTimestampDb() {\n            const bandid = this.$session.get('miband').id\n            try {\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${bandid}/last-fetch-time`)\n                const result = await response.json()\n                if(result['get-timestamp-result']=='succeeded'){\n                    return result['last-fetch-timestamp']\n                }\n                else return false\n            } catch (error){\n                console.log(error)\n            }\n        },\n        \n        async getDataFromLastTimestampMiband(){\n            const lastTsStr = await this.getLastFetchingDataTimestampDb()\n            \n            var lastTs\n            if(lastTsStr==''){\n                lastTs = new Date()\n            }\n            else {\n                lastTs = new Date(lastTsStr)           \n            }\n            const logs = await this.getDataMibandFrom(lastTs)\n            return logs\n        },\n\n        async addDataFromLastTimestampDb() {\n            const logs = await this.getDataFromLastTimestampMiband()\n            if(logs) {\n                if(Object.entries(logs).length!=0){\n                    var laststr = Object.keys(logs)[Object.keys(logs).length-1]\n\n                    this.convertLogsToUTC(logs)\n                    \n                    var add_result = await this.addLogsDb(logs)\n                    if(add_result) {\n                        this.setLastFetchingDataTimestampDb(laststr)\n\n                        this.lastGetDataTime = this.generateTimestampFromApiStr(laststr)\n                    }\n                }\n            }\n            \n        },\n\n        convertLogsToUTC(logs) {\n            for(var ts in logs) {\n                var timestamp = this.generateTimestampFromApiStr(ts)\n                var apiUTCStr = this.generateApiUTCTimeStr(timestamp)\n                logs[apiUTCStr] = logs[ts]\n                delete logs[ts]\n            }\n        },\n\n        generateApiUTCTimeStr(timestamp) {\n            var result, datestr, timestr, d, M, y, h, m\n            d = timestamp.getUTCDate()\n            M = timestamp.getUTCMonth()+1\n            y = timestamp.getUTCFullYear()\n            h = timestamp.getUTCHours()\n            m = timestamp.getUTCMinutes()\n            if(m<10) {\n                m = '0'+m\n            }\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            result = datestr + ' - ' + timestr\n            return result\n\n        },\n\n        generateApiTimeStr(timestamp) {\n            var result, datestr, timestr, d, M, y, h, m\n            d = timestamp.getDate()\n            //api string: real month | Date month system 0-11: 0: Jan, 1: Feb,...\n            //--> +1\n            M = timestamp.getMonth()+1\n            y = timestamp.getFullYear()\n            h = timestamp.getHours()\n            m = timestamp.getMinutes()\n            if(m<10) {\n                m = '0'+m\n            }\n            datestr = d + '.' + M + '.' + y\n            timestr = h + ':' + m\n            result = datestr + ' - ' + timestr\n            return result\n        },\n\n        generateTimestampFromApiStr(timestr) {\n            // dd.MM.yyyy - hh.mm\n            var result, d, M, y, h, m\n            d = timestr.slice(0,2)\n            //api string: real month | Date month system 0-11: 0: Jan, 1: Feb,...\n            //--> -1\n            M = parseInt(timestr.slice(3,5)) - 1\n            y = timestr.slice(6,10)\n            h = timestr.slice(13,15)\n            m = timestr.slice(16,18)\n            result = new Date(y, M, d, h, m)\n            return result\n        },\n\n        async getDataMibandFrom(timestamp) {\n            var start, end\n            start = this.generateApiTimeStr(timestamp)\n            end = this.generateApiTimeStr(new Date())\n            const params = 'start='+start + '&end='+end\n            try {\n                const response = await fetch(`http://${this.miband_host}:${this.miband_port}/band/activitydata?${params}`)\n                const result = await response.json()\n                if(result['log-data-result']=='succeeded'){\n                    return result['logs']\n                }\n                else return false\n            }\n            catch (error) {\n                console.log(error);\n            }\n            \n        },\n\n        async setLastFetchingDataTimestampDb(last){\n            const timestamp = this.generateTimestampFromApiStr(last)\n            const utcStr = this.generateApiUTCTimeStr(timestamp)\n            const bandid = this.$session.get('miband').id\n            try{\n                const response = await fetch(`http://${this.miband_db_host}:${this.miband_db_port}/bands/${bandid}/last-fetch-time`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    'last': utcStr\n                    }),\n                headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                })\n                const result = response.json()\n                if(result['set-timestamp-result']=='succeeded') {\n                    return true\n                }\n                return false\n            }\n            catch (error) {\n                console.log(error)\n            }\n        },\n\n        removeHourRange(){\n            this.hourvalue = null\n            this.createChartData()\n        }\n    }\n}\n</script>"]}]}